class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        ans = con = 1
        if not nums:
            return 0
        
        tmp = nums[0]
        for i in range(1, len(nums)):
            if len(nums) == 1:
                return ans
            elif nums[i] > tmp:
                con += 1
                if con > ans:
                    ans = con
            elif nums[i] <= tmp:
                con = 1
            tmp = nums[i]
        return ans
    
    
Using a left and right pointer to track the longest increasing subsequence
When we found a decreasing pattern, we update both pointers to the place it starts decrese.
   class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        left = 0
        right = 0
        max_length = 0
        for i in range(len(nums)):
            if nums[i] > nums[right]:
                right += 1
            else:
                left = i
                right = i
            max_length = max(right - left + 1, max_length)
        return max_length
