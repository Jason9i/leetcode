&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	(a & b) 输出结果 12 ，二进制解释： 0000 1100
|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101
^	按位异或运算符：当两对应的二进位相异时，结果为1	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1	(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。
<<	左移动运算符：运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数	a >> 2 输出结果 15 ，二进制解释： 0000 1111

class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        def dfs(emp):
            imp = emps[emp].importance            
            for s in emps[emp].subordinates:
                imp += dfs(s)
            return imp
        
        emps= {emp.id: emp for emp in employees}
        
        return dfs(id)
 
 #BFS
class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        adjList = {k.id : k.subordinates for k in employees}
        impList = {k.id : k.importance for k in employees}
        visited , result , queue = set() , 0 , deque()
        queue.append(id)
        result += impList[id]
        while queue:
            cur_employee = queue.pop()
            for subordinate in adjList[cur_employee]:
                if subordinate not in visited:
                    queue.append(subordinate)
                    visited.add(subordinate)
                    result += impList[subordinate]
        return result
		
#DFS
class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        def findImportance(id):
            result = 0
            if id in emp_list:
                cur_emp = emp_list[id]
                result += cur_emp.importance
                for subs in cur_emp.subordinates:
                    result += findImportance(subs)
            return result
        emp_list = {v.id : v for v in employees}
        return findImportance(id)
        
        
 class Solution:
    def getImportance(self, employees, id):
        def getSum(dic, D_list, s = 0): 
            for n in D_list : 
                s += dic[n][0]
                if dic[n][1] : s += getSum(dic,dic[n][1])
            return s
        
        dic, n_sum = {}, 0
        for employee in employees:
            dic[employee.id] = [employee.importance, employee.subordinates]
        
        n_sum += dic[id][0]
        n_sum += getSum(dic, dic[id][1])
        
        return n_sum
