## Two bidrectional pointers -- left and right pointers converge to the middle
class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        left, right = 0, int(math.sqrt(c))
        while left <= right:
            if left ** 2 + right ** 2 > c:
                right -= 1
            elif left ** 2 + right ** 2 < c:
                left += 1
            else:
                return True
        return False
                
## Generated list -- range return a list. Judge whether the result of c minus one square number is also a square number
from math import sqrt
class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        def isSquare(n):
            return int(sqrt(n)) ** 2 == n
        
        return any(isSquare(c-num**2) for num in range(int(sqrt(c))+1))
                
## Loop -- Same idea as the previous method, during the loop, judging whether existing one more square number
from math import sqrt
class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        if c == 0:
            return True
        
        for i in range(1, int(math.sqrt(c) + 1)):
            j = c - i ** 2
            if int(math.sqrt(j)) ** 2 == j:
                return True
        return False
            
