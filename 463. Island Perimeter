# First method to create a 1 D array 
N = 5
arr = [0]*N 
print(arr) 

[0, 0, 0, 0, 0]

# Second method to create a 1 D array 
N = 5
arr = [0 for i in range(N)] 
print(arr)

[0, 0, 0, 0, 0]

# Using above first method to create a  
# 2D array 
rows, cols = (5, 5) 
arr = [[0]*cols]*rows 
print(arr) 

[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

# Using above second method to create a  
# 2D array 
rows, cols = (5, 5) 
arr = [[0 for i in range(cols)] for j in range(rows)] 
print(arr) 

[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

# Using above second method to create a  
# 2D array 
rows, cols = (5, 5) 
arr=[] 
for i in range(cols): 
    col = [] 
    for j in range(rows): 
        col.append(0) 
    arr.append(col) 
print(arr) 

[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]


# Python 3 program to demonstrate working  
# of method 1 and method 2. 
  
rows, cols = (5, 5) 
  
# method 2a 
arr = [[0]*cols]*rows 
  
# lets change the first element of the  
# first row to 1 and print the array 
arr[0][0] = 1
  
for row in arr: 
    print(row) 
# outputs the following 
#[1, 0, 0, 0, 0] 
#[1, 0, 0, 0, 0] 
#[1, 0, 0, 0, 0] 
#[1, 0, 0, 0, 0] 
#[1, 0, 0, 0, 0] 
  
# method 2b 
arr = [[0 for i in range(cols)] for j in range(rows)] 
  
# again in this new array lets change 
# the first element of the first row  
# to 1 and print the array 
arr[0][0] = 1
for row in arr: 
    print(row) 
  
# outputs the following as expected 
#[1, 0, 0, 0, 0] 
#[0, 0, 0, 0, 0] 
#[0, 0, 0, 0, 0] 
#[0, 0, 0, 0, 0] 
#[0, 0, 0, 0, 0] 

class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        m = len(grid) # how many row 
        n = len(grid[0]) # how many column
        area = conn = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    area += 1
                    if(i > 0 and grid[i-1][j] == 1): conn += 1
                    if(i < m-1 and grid[i+1][j] == 1): conn += 1
                    if(j > 0 and grid[i][j-1] == 1): conn += 1
                    if(j < n-1 and grid[i][j+1] == 1): conn += 1
        return area*4 - conn
        
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        m = len(grid) # how many row 
        n = len(grid[0]) # how many column
        area = conn = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    area += 1
                    if(i > 0 and grid[i-1][j] == 1): conn += 1
                    #if(i < m-1 and grid[i+1][j] == 1): conn += 1 symmetry
                    if(j > 0 and grid[i][j-1] == 1): conn += 1
                    #if(j < n-1 and grid[i][j+1] == 1): conn += 1 symmetry
        return area*4 - conn*2
        
        
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        m = len(grid)
        
        if m == 0:  # if empty grid
            return 0
        
        n = len(grid[0])
        res = 0    # initial value
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:  # if found "1"
                    res += 4
                    
                if i > 0 and grid[i-1][j] == 1and grid[i][j] == 1:  # if found an top element
                    res -= 2
                if j > 0 and grid[i][j - 1] == 1 and grid[i][j] == 1: # if found a left element
                    res -= 2
                    
        return res
