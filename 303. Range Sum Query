class NumArray:
    ## RC ##
    ## APPROACH : PREFIX SUM ##
    
	## TIME COMPLEXITY : O(1) (sumRange) ##
	## SPACE COMPLEXITY : O(N) ##

    def __init__(self, nums: List[int]):
        self.lookup = collections.defaultdict(int)
        for i in range(len(nums)):
            self.lookup[i] = nums[i] + self.lookup[i-1]

    def sumRange(self, i: int, j: int) -> int:
        return self.lookup[j] - self.lookup[i-1]
        
class NumArray:

    def __init__(self, nums: List[int]):
        
        self.dp=[0]
        
        for num in nums:
            self.dp.append(self.dp[-1]+num)

        
        
    def sumRange(self, i: int, j: int) -> int:
        
        return self.dp[j+1]-self.dp[i]
        
        
        
     def __init__(self, nums: List[int]):
        self.sum = []
        sum_till = 0
        for i in nums:
            sum_till += i
            self.sum.append(sum_till) #DP get the sum for each new scaned value

    def sumRange(self, i: int, j: int) -> int:
        if i > 0 and j > 0: #range query
            return self.sum[j] - self.sum[i - 1]
        else:
            return self.sum[i or j]
