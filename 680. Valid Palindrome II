if s[l] != s[r]:
	check s[l+1] ?=  s[r] #delete s[l]
	check s[l] ?= s[r-1]  #delete s[r]

版权
1、数组倒序：
原始元素的倒序排列
arr = [1,2,3,4,3,4]
(1)print arr[::-1]     ---->[4, 3, 4, 3, 2, 1]
(2)arr.reverse()
    print arr       ---->[4, 3, 4, 3, 2, 1]
(3)reversed(arr)     #返回一个倒序可遍历对象，需序遍历出
arr = [1,2,3,4,3,4]
reversed_arr = []
for i in reversed(arr):
    reversed_arr.append(i)
print reversed_arr      ---->[4, 3, 4, 3, 2, 1]

2、字符串倒序：
(1)利用字符串截取
param = 'hello'
print param[::-1]     ---->'olleh'

(2)利用reversed()返回倒可迭代对象（字符串实现）
param = 'hello'
rev_str = ''
for i in reversed(param):
    rev_str += i
print rev_str     ---->'olleh'
(3)利用reversed()返回倒可迭代对象（数组实现）
rev_arr = []
for i in reversed(param):
    rev_arr.append(i)
print ''.join(rev_arr)


另：
元素排序后的倒序排列：
1、sorted(...)生成新的已排列数组
sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
2、 arr.sort(...)直接操作arr，arr内元素进行正序排列

元素内的排序
param = 'hello'     #返回元素内的排序
rev_str =  ''.join(sorted(param))     #sorted(param)返回倒序排列的数组['e', 'h', 'l', 'l', 'o']
print rev_str      ---->'ehllo'


class Solution:
    def validPalindrome(self, s: str) -> bool:
        l, r = 0, len(s)-1
        
        def check_if_palindrome(l, r):
	        return s[l:r+1] == s[l:r+1][::-1]

        while l < r:
	        if s[l] != s[r]:
		        first = check_if_palindrome(l, r-1)
		        if first: return first
		        second = check_if_palindrome(l+1, r)
		        return second
	        l += 1
	        r -= 1
        return True
        
        
class Solution:
    def validPalindrome(self, s: str) -> bool:
        l, r = 0, len(s)-1
        count = 0
                    
        def isPalindrome(l, r, count):
            if count > 1:
                return False
            while l < r:
                if s[l] == s[r]:
                    l+=1
                    r-=1
                if s[l] != s[r]:
                    if s[l+1] != s[r] and s[l] != s[r-1]:
                        return False
                    return isPalindrome(l+1, r, count+1) or isPalindrome(l, r-1, count+1)
					
            return True
        
        return isPalindrome(l, r, count)
        
        
 class Solution:
    def validPalindrome(self, s: str) -> bool:
        """
        Given an input string s, this program determines whether s is a
        valid palindrome or becomes one with the removal of a single
        character.

        :param s: input string
        :type s: str
        :return: True if s is palindrome unmodified or with the removal
                 of a single character, else False
        :rtype: bool
        """
        """
        If s is a palindrome unmodified, return True right away.
        """
        if s == s[::-1]:
            return True

        """
        The string s may be a palindrome with the removal of a character.
        The while loop finds two possible locations of the offending
        character, s[left] (leftmost) and s[right] (rightmost).
        """
        left = 0
        right = len( s ) - 1
        while s[left] == s[right]:
            left += 1
            right -= 1

        """
        Check whether substring created by removing either the leftmost
        character or rightmost character from the while loop is a valid
        palindrome.
        """
        new_s = s[left+1:right+1]
        if new_s == new_s[::-1]:
            return True
        new_s = s[left:right]
        if new_s == new_s[::-1]:
            return True
        return False
