class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        n = x ^ y
        c = 0
        while n:
            c += 1
            n &= (n-1)
        return c
        
class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        n = x ^ y
        ans = 0
        while n:
            ans += n & 1
            n>>=1
        return ans
       
       
& 	AND	Sets each bit to 1 if both bits are 1
|	  OR	Sets each bit to 1 if one of two bits is 1
^ 	XOR	Sets each bit to 1 if only one of two bits is 1
~ 	NOT	Inverts all the bits
<<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
