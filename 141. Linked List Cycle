# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        dic={}
        while head:
            if id(head) in dic:
                return True
            else:
                dic[id(head)] = head
                head = head.next
        return False
           
Solution 1 : O(n) time and O(1) Space
 
   class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:
            return False
        
        slow=head
        fast=head.next
        
        while slow!=fast:
            if not fast or not fast.next:
                return False
            slow=slow.next
            fast=fast.next.next
        return True 
        
        
Solution 2 : O(n) time and space
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        seen=set()
        curr=head
        while curr:
            if curr in seen:
                return True
            seen.add(curr)
            curr=curr.next
        return False
        
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:
            return False
        while head != None:
            if(head.val == 'a'):
                return True
            else:
                head.val = 'a'
            head = head.next
        return False
