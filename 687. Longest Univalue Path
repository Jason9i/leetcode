Similiar to 543. Diameter of Binary Tree.

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:

        def helper(node):
            nonlocal res
            
            if not node:
                return 0
            
            left = helper(node.left)
            right = helper(node.right)
            
            res = max(res, left + right)
            
            return max(left, right) + 1
        
        res = 0
        
        helper(root)
        
        return res


class Solution:
    def longestUnivaluePath(self, root: TreeNode) -> int:
        
        def helper(node):
            nonlocal res
            
            if not node:
                return 0
            
            left = helper(node.left)
            right = helper(node.right)
            
            if not node.left or node.left.val != node.val: left = 0
            if not node.right or node.right.val != node.val: right = 0
                
            res = max(res, 1+ left + right)
            
            return max(left, right) + 1
        
        res = 0
        
        helper(root)
        
        return max(0, res -1)


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestUnivaluePath(self, root: TreeNode) -> int:
        if root is None:
            return 0
        if root.left is None and root.right is None:
            return 0
        return self.longpaths(root)[2]
                
    def longpaths(self, node):
        left, right, main = 0, 0, 0
        flag = False
        if node.right is not None:
            l, r, m = self.longpaths(node.right)
            if m > main:
                main = m
            if node.right.val == node.val:
                right = max([l, r]) + 1
                if right > main:
                    main = right
                flag = True
        
        if node.left is not None:
            l, r, m = self.longpaths(node.left)
            if m > main:
                main = m
            if node.left.val == node.val:
                left = max([l, r]) + 1
                if left > main:
                    main = left
                if flag:
                    if left + right > main:
                        main = left + right
        return left, right, main
        
class Solution:
    def longestUnivaluePath(self, root: TreeNode) -> int:
        if not root: return 0
        self.res = 0
        self.postOrder(root)
        return self.res
    
    def postOrder(self, node):
        if not node: return 0
        l_val = r_val = b_val = 0
        l_val = self.postOrder(node.left)
        r_val = self.postOrder(node.right)
        
        if node.left and node.right and (node.val == node.left.val == node.right.val):
            self.res = max(self.res, l_val + r_val + 2)
            return (max(l_val, r_val) + 1)
            
        elif node.left and (node.val == node.left.val):
            l_val += 1
            self.res = max(self.res, l_val)
            return l_val
        elif node.right and (node.val == node.right.val):
            r_val += 1
            self.res = max(self.res, r_val)
            return r_val
        else:
            return 0
