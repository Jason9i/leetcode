Brute force: Time complexity: o(n^2), space complexity o(n)
	is_overlapping(s1,s2,e1,e2): return max(s1,s2) < min(e1,e2)
	
class MyCalendar:

    def __init__(self):
        self.data = []

    def book(self, start: int, end: int) -> bool:
        if not self.data:
            self.data.append([start, end])
            return True
        for interval in self.data:
            if start >= interval[1] or end <= interval[0]:
                continue
            else:
                return False
        self.data.append([start,end])
        return True


# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)

Binary search: Time complexity: o(nlogn), space complexity o(n)
map<int, int>: start -> end


key = q.start
floor:largest entry whose key <= query key
celling: smallesr entry whose key > query key

bisect.bisect_left(a, x, lo=0, hi=len(a))
在 a 中找到 x 合适的插入点以维持有序。参数 lo 和 hi 可以被用于确定需要考虑的子集；默认情况下整个列表都会被使用。
如果 x 已经在 a 里存在，那么插入点会在已存在元素之前（也就是左边）。如果 a 是列表（list）的话，返回值是可以被放在 list.insert() 的第一个参数的。

返回的插入点 i 可以将数组 a 分成两部分。左侧是 all(val < x for val in a[lo:i]) ，右侧是 all(val >= x for val in a[i:hi]) 。

bisect.bisect_right(a, x, lo=0, hi=len(a))
bisect.bisect(a, x, lo=0, hi=len(a))
类似于 bisect_left()，但是返回的插入点是 a 中已存在元素 x 的右侧。

返回的插入点 i 可以将数组 a 分成两部分。左侧是 all(val <= x for val in a[lo:i])，右侧是 all(val > x for val in a[i:hi]) for the right side。

bisect.insort_left(a, x, lo=0, hi=len(a))
将 x 插入到一个有序序列 a 里，并维持其有序。如果 a 有序的话，这相当于 a.insert(bisect.bisect_left(a, x, lo, hi), x)。要注意搜索是 O(log n) 的，插入却是 O(n) 的。

bisect.insort_right(a, x, lo=0, hi=len(a))
bisect.insort(a, x, lo=0, hi=len(a))
类似于 insort_left()，但是把 x 插入到 a 中已存在元素 x 的右侧。


import sortedcontainers

class MyCalendar:

    def __init__(self):
        self.data = sortedcontainers.SortedList()

    def book(self, start: int, end: int) -> bool:
        index = self.data.bisect_left([start, end])
        start_valid = (index == 0 or start >= self.data[index-1][1])
        end_valid = (index == len(self.data) or end <= self.data[index][0])
        
        if start_valid and end_valid:
            self.data.add([start, end])
            return True
        else:
            return False
        
        

# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)


class TreeNode():
	def __init__(self, s, e):
		self.s = s
		self.e = e
		self.left = None
		self.right = None

class MyCalendar:

	def __init__(self):
		self.root = None

	def book(self, start: int, end: int) -> bool:
		if not self.root:
			self.root = TreeNode(start, end)
			return True
		else:
			return self.insert(start, end, self.root)

	# try to decide where I can go
	# if my start is greater than or equal to end then go to the right
	# equal is allowed as "end" is not part of the interval

	# if my end is less than or equal to the start then go to the left
	# equal is allowed as "end" is not part of the interval
	def insert(self, s, e, node):
		if s >= node.e: 
			if node.right:
				return self.insert(s, e, node.right)
			else:
				node.right = TreeNode(s, e)
				return True
		elif e <= node.s: 
			if node.left:
				return self.insert(s, e, node.left)
			else:
				node.left = TreeNode(s, e)
				return True
		else:
			return False
