class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        self.output = True
        if not root:
            return True
        
        def dfs(node):
            if not node:
                return 0
            l_hei = dfs(node.left)
            r_hei = dfs(node.right)
            if abs(l_hei-r_hei) > 1:
                self.output = False
                return (False)
            return max(l_hei, r_hei)+1
        
        dfs(root)
        return (self.output)
        
       
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.ans = True
        
    def dfs(self, root, depth):
        if(not root):
            return depth - 1 
        
        left = self.dfs(root.left, depth+1)
        right = self.dfs(root.right, depth+1)
        
        if(abs(left-right)>1):
            self.ans = False
        return max(left, right)
        
    def isBalanced(self, root: TreeNode) -> bool:
        self.dfs(root, 0)
        return self.ans
