class Solution:
    def finalPrices(self, prices: List[int]) -> List[int]:
        if not prices:
            return []
        
        if len(prices) == 1:
            return prices[0]
        
        for i in range(len(prices)-1):
            k = i + 1
            while k <len(prices) and prices[k]> prices[i]:
                k += 1
            if k <len(prices):
                prices[i] -= prices[k]
        return prices
        
At this point, when you see this post, you may have already know how to code using the Monotonous Increasing Stack stragegy. 
This post has the same code as you saw from other posts. However, as an engineer like me, I'd like to actually see how the Monotonous Stack works visually. 
So here you go, below are some diagrams to illustrate it thruough the example prices = [8,4,6,2,3]. You will see the stack status, and how the elements are updated.
A couple of highlights about the below code though:

Implementing the Monotonous Increasing Stack stragegy
The stack stores indices

class Solution:
    def finalPrices(self, prices: List[int]) -> List[int]:
        stack = []
        for i in range(len(prices)):
            while stack and (prices[stack[-1]] >= prices[i]):
                prices[stack.pop()] -= prices[i]
            stack.append(i)
        return prices
