class Solution:
    def search(self, nums: List[int], target: int) -> int:
        def bSearch(nums, low, high, targ):
            if high >= low:
                mid = low + (high - low)//2
                if nums[mid] == targ:
                    return mid
                elif nums[mid] > targ:
                    return bSearch(nums, low, mid-1, targ)
                elif nums[mid] < targ:
                    return bSearch(nums, mid+1, high, targ)
            else:
                return -1
        return bSearch(nums, 0, len(nums)-1, target)
        
        
        Binary Search


class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if len(nums)<=2:
            for idx in range(len(nums)):
                if nums[idx] == target:
                    return idx
            return -1

        def findMid(low, high, lis, targ):
            if high >= low:
                mid = low + (high - low)//2
                if lis[mid] < targ:
                    return findMid(mid + 1, high, lis, targ)
                elif lis[mid] == targ:
                    return mid
                elif lis[mid] > targ:
                    return findMid(low, mid -1, lis, targ)
            else:
                return -1
        return findMid(0, len(nums)-1, nums, target)



class Solution:
    def search(self, nums: List[int], target: int) -> int:
        def findMid(low, high, lis, targ):
            if high >= low:
                mid = low + (high - low)//2
                if lis[mid] < targ:
                    return findMid(mid + 1, high, lis, targ)
                elif lis[mid] == targ:
                    return mid
                elif lis[mid] > targ:
                    return findMid(low, mid -1, lis, targ)
            else:
                return -1
        return findMid(0, len(nums)-1, nums, target)