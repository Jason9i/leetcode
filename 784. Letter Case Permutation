class Solution:
    def letterCasePermutation(self, S: str) -> List[str]:
        ans = [""]
        for s in S:
            if s.isdigit():
                ans = [c+s for c in ans]
            else:
                tmp1 = [c+s.lower() for c in ans]
                tmp2 = [c+s.upper() for c in ans]
                ans = tmp1 + tmp2
        return ans


class Solution:
    def letterCasePermutation(self, S: str) -> List[str]:
        res = []
        def backtrack(s, path):
            if len(path) == len(S):
                res.append(path)
                return
            for i in range(len(s)):
                if s[i].isnumeric():
                    backtrack(s[i+1:], path+s[i])
                else:
                    backtrack(s[i+1:], path+s[i].upper())
                    backtrack(s[i+1:], path+s[i].lower())
        backtrack(S, "")
        return res
